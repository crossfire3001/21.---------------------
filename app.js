// 21. Logical operators

// Always [false] = 0, '', null, undefined, NaN;

console.log(NaN || 2 || undefined); // 2
/* Выражение NaN || 2 || undefined использует логический оператор "или" (||) для проверки условий и возвращает первое истинное значение или последнее значение, если все значения являются ложными.

В данном случае, оператор || будет проверять значения по порядку:

NaN является ложным значением (falsy), поэтому переходим к следующему значению.
2 является истинным значением (truthy), поэтому возвращается 2, и проверка останавливается. Дальнейшая проверка не выполняется.

Таким образом, результатом выражения console.log(NaN || 2 || undefined) будет вывод в консоль числа 2. */

console.log(NaN && 2 && undefined); // NaN
/* Выражение NaN && 2 && undefined использует логический оператор "и" (&&) для проверки условий и возвращает первое ложное значение или последнее истинное значение, если все значения являются истинными.

В данном случае, оператор && будет проверять значения по порядку:

NaN является ложным значением (falsy), поэтому возвращается NaN, и проверка останавливается. Дальнейшая проверка не выполняется.

Таким образом, результатом выражения console.log(NaN && 2 && undefined) будет вывод в консоль значения NaN. */

console.log(1 && 2 && 3); // 3
/* Выражение 1 && 2 && 3 использует логический оператор "и" (&&) для проверки условий и возвращает последнее истинное значение, если все значения являются истинными.

В данном случае, оператор && будет проверять значения по порядку:

1 является истинным значением (truthy), поэтому продолжаем проверку.
2 также является истинным значением (truthy), поэтому продолжаем проверку.
3 также является истинным значением (truthy), и это последнее значение.

Таким образом, результатом выражения console.log(1 && 2 && 3) будет вывод в консоль числа 3. */

console.log(!1 && 2 || !3); // false

/* Выражение !1 && 2 || !3 использует логические операторы "отрицание" (!), "и" (&&) и "или" (||) для проверки условий и возвращает результат выражения.

Давайте проанализируем выражение по частям:

!1 - оператор ! применен к значению 1. Оператор ! выполняет отрицание значения и возвращает логическое противоположное значение. В данном случае, 1 является истинным значением (truthy), поэтому !1 вернет ложное значение (falsy) false.

false && 2 - оператор && проверяет оба операнда. Если оба операнда являются истинными значениями, оператор вернет последнее истинное значение. В данном случае, первый операнд false является ложным значением (falsy), поэтому оператор && возвращает false и дальнейшая проверка не выполняется. Результат выражения становится false.

false || !3 - оператор || проверяет оба операнда. Если хотя бы один из операндов является истинным значением, оператор вернет первое истинное значение. В данном случае, оба операнда являются ложными значениями (falsy). Второй операнд !3 применяет отрицание к значению 3 и возвращает ложное значение false. Таким образом, оператор || возвращает false.

Итоговым результатом выражения console.log(!1 && 2 || !3) будет вывод в консоль значения false. */

console.log(25 || null && !3); // 25
/* Выражение 25 || null && !3 использует логические операторы "или" (||), "и" (&&) и "отрицание" (!) для проверки условий и возвращает результат выражения.

Давайте проанализируем выражение по частям:

null && !3 - оператор && проверяет оба операнда. Если оба операнда являются истинными значениями, оператор возвращает последнее истинное значение. В данном случае, первый операнд null является ложным значением (falsy), поэтому оператор && возвращает null, и дальнейшая проверка не выполняется.

25 || null - оператор || проверяет оба операнда. Если хотя бы один из операндов является истинным значением, оператор возвращает первое истинное значение. В данном случае, первый операнд 25 является истинным значением (truthy), поэтому оператор || возвращает 25.

Итоговым результатом выражения console.log(25 || null && !3) будет вывод в консоль значения 25. */

console.log( NaN || null || !3 || undefined || 5); // 5

/* Выражение NaN || null || !3 || undefined || 5 использует логический оператор "или" (||) для проверки условий и возвращает первое истинное значение или последнее значение, если все значения являются ложными.

В данном случае, оператор || будет проверять значения по порядку:

NaN является ложным значением (falsy), поэтому переходим к следующему значению.
null также является ложным значением (falsy), поэтому переходим к следующему значению.
!3 - оператор ! применен к значению 3. Оператор ! выполняет отрицание значения и возвращает логическое противоположное значение. В данном случае, 3 является истинным значением (truthy), поэтому !3 вернет ложное значение (falsy) false. Таким образом, этот операнд является ложным значением (falsy), и проверка продолжается.
undefined является ложным значением (falsy), поэтому переходим к следующему значению.
5 является истинным значением (truthy), и это последнее значение.

Таким образом, результатом выражения console.log(NaN || null || !3 || undefined || 5) будет вывод в консоль числа 5. */

console.log( NaN || null && !3 && undefined || 5); // 5

/* Выражение `NaN || null && !3 && undefined || 5` использует логические операторы "или" (`||`) и "и" (`&&`) для проверки условий и возвращает первое истинное значение или последнее значение, если все значения являются ложными.

Давайте проанализируем выражение по частям:

1. `null && !3 && undefined` - оператор `&&` проверяет все операнды. Если все операнды являются истинными значениями, оператор возвращает последнее истинное значение. В данном случае, первый операнд `null` является ложным значением (falsy), поэтому возвращается `null`, и дальнейшая проверка не выполняется.

2. `NaN || null` - оператор `||` проверяет оба операнда. Если хотя бы один из операндов является истинным значением, оператор возвращает первое истинное значение. В данном случае, второй операнд `null` является ложным значением (falsy), поэтому оператор `||` переходит к следующему операнду.

3. `null` является ложным значением (falsy), поэтому переходим к следующему значению.

4. `undefined` является ложным значением (falsy), поэтому переходим к следующему значению.

5. `5` является истинным значением (truthy), и это последнее значение.

Таким образом, результатом выражения `console.log(NaN || null && !3 && undefined || 5)` будет вывод в консоль числа `5`. */

console.log(5 === 5 && 3 > 1 ||  5); // true

/* Выражение `5 === 5 && 3 > 1 || 5` использует логические операторы "и" (`&&`) и "или" (`||`) для проверки условий и возвращает результат выражения.

Давайте проанализируем выражение по частям:

1. `5 === 5` - оператор `===` сравнивает два значения на равенство и тип данных. В данном случае, оба операнда равны `5` и имеют тип данных "number", поэтому это выражение вернет `true`.

2. `3 > 1` - оператор `>` проверяет, является ли левый операнд больше правого. В данном случае, `3` больше `1`, поэтому это выражение вернет `true`.

3. `true && true` - оператор `&&` проверяет оба операнда. Если оба операнда являются истинными значениями, оператор вернет последнее истинное значение. В данном случае, оба операнда (`5 === 5` и `3 > 1`) являются истинными значениями, поэтому оператор `&&` вернет `true`.

4. `true || 5` - оператор `||` проверяет оба операнда. Если хотя бы один из операндов является истинным значением, оператор вернет первое истинное значение. В данном случае, первый операнд `true` является истинным значением, поэтому оператор `||` вернет `true`.

Итоговым результатом выражения `console.log(5 === 5 && 3 > 1 || 5)` будет вывод в консоль значения `true`. */

